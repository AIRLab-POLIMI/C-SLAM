cmake_minimum_required(VERSION 2.4.6)

find_package(catkin)
project(c_fuzzy)

# If catkin is not found, just compile the executable without ROS goodies
if(catkin_FOUND)
	catkin_package()
	include_directories(include ${catkin_INCLUDE_DIRS})
else()
	include_directories(${PROJECT_SOURCE_DIR}/include)
endif()

include_directories(include ${catkin_INCLUDE_DIRS})


#search for Bison and Flex packages
find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)

#generate parser and lexer from flex and Bison sources
BISON_TARGET(Parser src/parser.y ${PROJECT_SOURCE_DIR}/src/FuzzyParser.tab.cpp COMPILE_FLAGS --defines="${PROJECT_SOURCE_DIR}/include/FuzzyParser.tab.h")
FLEX_TARGET(Scanner src/scanner.l ${PROJECT_SOURCE_DIR}/src/FuzzyScanner.cpp)

#move generated files into include directory
add_custom_target(Headers
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/src/stack.hh ${PROJECT_SOURCE_DIR}/include/stack.hh
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/src/position.hh ${PROJECT_SOURCE_DIR}/include/position.hh
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/src/location.hh ${PROJECT_SOURCE_DIR}/include/location.hh
		DEPENDS ${BISON_Parser_OUTPUTS})

#add dependencies between parser and scanner (.l e .y)
ADD_FLEX_BISON_DEPENDENCY(Scanner Parser)


#build the library
add_library(${PROJECT_NAME} STATIC
			src/FuzzyAggregator.cpp  
			src/FuzzyBuilder.cpp  
			src/FuzzyMF.cpp  
			src/FuzzyOperator.cpp  
			src/FuzzyParser.tab.cpp  
			src/FuzzyReasoner.cpp  
			src/FuzzyRule.cpp  
			src/FuzzyScanner.cpp
			${FLEX_Scanner_OUTPUTS}
			${BISON_Parser_OUTPUTS})

#remember to move the headers into include!
add_dependencies(${PROJECT_NAME} Headers)

#build a test application
add_executable(prova src/test.cpp)

target_link_libraries(prova ${PROJECT_NAME})

#clean all remaining headers
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E echo "cleaning *.hh files autogenerated in src"
		COMMAND ${CMAKE_COMMAND} -E remove ${PROJECT_SOURCE_DIR}/src/stack.hh ${PROJECT_SOURCE_DIR}/src/position.hh ${PROJECT_SOURCE_DIR}/src/location.hh)
